platform :android do
  desc "Android Production App"

  lane :version do
    increment_version_name(
      gradle_file_path: './android/app/build.gradle',
      version_name: ENV["RELEASE_VERSION"]
    )
  end

  lane :distribute do
    gradle(task: 'clean assembleRelease', project_dir: './android', print_command: false, properties: {
      "HAQQ_UPLOAD_STORE_FILE" => ENV["HAQQ_UPLOAD_STORE_FILE"],
      "HAQQ_UPLOAD_STORE_PASSWORD" => ENV["HAQQ_UPLOAD_STORE_PASSWORD"],
      "HAQQ_UPLOAD_KEY_ALIAS" => ENV["HAQQ_UPLOAD_KEY_ALIAS"],
      "HAQQ_UPLOAD_KEY_PASSWORD" => ENV["HAQQ_UPLOAD_KEY_PASSWORD"]
    })

    firebase_app_distribution(
      app: "1:915453653093:android:d69f18643b8b3f2954568c",
      testers: ENV["FIREBASE_TESTERS"],
      firebase_cli_token: ENV["FIREBASE_TOKEN"],
      release_notes: "Lots of amazing new features to test out!"
    )
  end

  lane :release do
      gradle(task: 'clean bundleRelease', project_dir: './android', print_command: false, properties: {
        "HAQQ_UPLOAD_STORE_FILE" => ENV["HAQQ_UPLOAD_STORE_FILE"],
        "HAQQ_UPLOAD_STORE_PASSWORD" => ENV["HAQQ_UPLOAD_STORE_PASSWORD"],
        "HAQQ_UPLOAD_KEY_ALIAS" => ENV["HAQQ_UPLOAD_KEY_ALIAS"],
        "HAQQ_UPLOAD_KEY_PASSWORD" => ENV["HAQQ_UPLOAD_KEY_PASSWORD"]
      })

      upload_to_play_store(
        skip_upload_metadata: true,
        skip_upload_changelogs: true,
        skip_upload_screenshots: true,
        skip_upload_images: true,
        skip_upload_apk: true,
        track: 'internal',
        release_status: 'draft',
        aab: 'android/app/build/outputs/bundle/release/app-release.aab'
      )
  end

  lane :version_code do
    previous_build_number = google_play_track_version_codes(
      package_name: 'com.haqq.wallet',
      track: "internal",
      json_key: './android/app/google-account.json',
    )[0]

    current_build_number = previous_build_number + 1

    increment_version_code(
      gradle_file_path: './android/app/build.gradle',
      version_code: current_build_number
    )
  end
end

platform :ios do
  desc "IOS Production App"

  def delete_temp_keychain(name)
    delete_keychain(
      name: name
    ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
  end

  def create_temp_keychain(name, password)
    create_keychain(
      name: name,
      password: password,
      unlock: false,
      timeout: 0
    )
  end

  def ensure_temp_keychain(name, password)
    delete_temp_keychain(name)
    create_temp_keychain(name, password)
  end

  lane :version do
    increment_version_number(
      xcodeproj: './ios/haqq.xcodeproj',
      version_number: ENV["RELEASE_VERSION"]
    )
  end

  lane :certificates do
    match(
      app_identifier: ENV["IOS_IDENTIFIER"],
      type: 'development',
      readonly: true,
      git_basic_authorization: Base64.strict_encode64(ENV["GIT_AUTHORIZATION"])
    )
    match(
      app_identifier: ENV["IOS_IDENTIFIER"],
      type: 'appstore',
      readonly: true,
      git_basic_authorization: Base64.strict_encode64(ENV["GIT_AUTHORIZATION"])
    )
  end

  lane :test do
    ensure_temp_keychain(ENV["TEMP_KEYCHAIN_USER"], ENV["TEMP_KEYCHAIN_PASSWORD"])

    certificates

    delete_temp_keychain(ENV["TEMP_KEYCHAIN_USER"])
  end

  lane :distribute do
    ensure_temp_keychain(ENV["TEMP_KEYCHAIN_USER"], ENV["TEMP_KEYCHAIN_PASSWORD"])
    certificates

    api_key = app_store_connect_api_key(
      key_id: ENV["APPLE_KEY_ID"],
      issuer_id: ENV["APPLE_ISSUER_ID"],
      key_content: ENV["APPLE_KEY_CONTENT"],
      duration: 1200,
      in_house: false
    )

    cocoapods(
      clean_install: true
    )

    build_app(workspace: "ios/haqq.xcworkspace", scheme: "haqq")

    pilot(
      ipa: "haqq.ipa",
      skip_submission: true,
      skip_waiting_for_build_processing: true
    )

    delete_temp_keychain(keychain_name)
  end
end
