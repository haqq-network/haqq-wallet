platform :android do
  desc "Android Production App"

  lane :version do
    increment_version_name(
      gradle_file_path: './android/app/build.gradle',
      version_name: ENV["RELEASE_VERSION"]
    )
  end

  lane :patch_build do
    current_build_number = google_play_track_version_codes(
      package_name: 'com.haqq.wallet',
      track: "internal",
      json_key: './android/app/google-account.json',
    )[0]

    increment_version_code(
      gradle_file_path: './android/app/build.gradle',
      version_code: current_build_number
    )
  end

  lane :distribute do
      previous_build_number = google_play_track_version_codes(
        package_name: 'com.haqq.wallet',
        track: "internal",
        json_key: './android/app/google-account.json',
      )[0]

      current_build_number = previous_build_number + 1

      increment_version_code(
        gradle_file_path: './android/app/build.gradle',
        version_code: current_build_number
      )

      gradle(task: 'clean bundleRelease', project_dir: './android', print_command: false, properties: {
        "HAQQ_UPLOAD_STORE_FILE" => ENV["HAQQ_UPLOAD_STORE_FILE"],
        "HAQQ_UPLOAD_STORE_PASSWORD" => ENV["HAQQ_UPLOAD_STORE_PASSWORD"],
        "HAQQ_UPLOAD_KEY_ALIAS" => ENV["HAQQ_UPLOAD_KEY_ALIAS"],
        "HAQQ_UPLOAD_KEY_PASSWORD" => ENV["HAQQ_UPLOAD_KEY_PASSWORD"]
      })

      upload_to_play_store(
        skip_upload_metadata: true,
        skip_upload_changelogs: true,
        skip_upload_screenshots: true,
        skip_upload_images: true,
        skip_upload_apk: true,
        track: 'internal',
        release_status: 'draft',
        aab: 'android/app/build/outputs/bundle/release/app-release.aab'
      )
  end
end

platform :ios do
  desc "IOS Production App"

  def delete_temp_keychain(name)
    delete_keychain(
      name: name
    ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
  end

  def create_temp_keychain(name, password)
    create_keychain(
      name: name,
      password: password,
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
    )
  end

  def ensure_temp_keychain(name, password)
    delete_temp_keychain(name)
    create_temp_keychain(name, password)
  end

  lane :slack_notification do
    api_key = app_store_connect_api_key(
      key_id: ENV["APPLE_KEY_ID"],
      issuer_id: ENV["APPLE_ISSUER_ID"],
      key_content: ENV["APPLE_KEY_CONTENT"],
      duration: 1200,
      in_house: false
    )

    current_build_number_android = google_play_track_version_codes(
      package_name: 'com.haqq.wallet',
      track: "internal",
      json_key: './android/app/google-account.json',
    )[0] + 1

    current_build_number_ios = latest_testflight_build_number(
      app_identifier: ENV["IOS_IDENTIFIER"],
      api_key: api_key,
    ) + 1

    sh("IOS=#{current_build_number_ios} ANDROID=#{current_build_number_android} BUILD_DESCRIPTION=\"#{ENV['BUILD_DESCRIPTION']}\" node ../utils/changelog.js $(cat ../.last-build) >> changelog.txt")
    sh("echo Generated Changelog: $(cat changelog.txt)")
  end

  lane :version do
    increment_version_number(
      xcodeproj: './ios/haqq.xcodeproj',
      version_number: ENV["RELEASE_VERSION"]
    )
  end

  lane :test do
    ensure_temp_keychain(ENV["TEMP_KEYCHAIN_USER"], ENV["TEMP_KEYCHAIN_PASSWORD"])

    api_key = app_store_connect_api_key(
      key_id: ENV["APPLE_KEY_ID"],
      issuer_id: ENV["APPLE_ISSUER_ID"],
      key_content: ENV["APPLE_KEY_CONTENT"],
      duration: 1200,
      in_house: false
    )

    match(
      app_identifier: ENV["IOS_IDENTIFIER"],
      type: 'appstore',
      readonly: true,
      keychain_name: ENV["TEMP_KEYCHAIN_USER"],
      keychain_password: ENV["TEMP_KEYCHAIN_PASSWORD"],
      api_key: api_key
    )

    delete_temp_keychain(ENV["TEMP_KEYCHAIN_USER"])

  end

  lane :patch_build do
    api_key = app_store_connect_api_key(
      key_id: ENV["APPLE_KEY_ID"],
      issuer_id: ENV["APPLE_ISSUER_ID"],
      key_content: ENV["APPLE_KEY_CONTENT"],
      duration: 1200,
      in_house: false
    )

    current_build_number = latest_testflight_build_number(
      app_identifier: ENV["DEVELOPER_APP_IDENTIFIER"],
      api_key: api_key,
    )

    increment_build_number(
      xcodeproj: './ios/haqq.xcodeproj',
      build_number: current_build_number
    )
  end

  lane :distribute do
    keychain_name = ENV["TEMP_KEYCHAIN_USER"]
    keychain_password = ENV["TEMP_KEYCHAIN_PASSWORD"]
    app_identifier =  ENV["DEVELOPER_APP_IDENTIFIER"]
    developer_apple_id = ENV["DEVELOPER_APP_ID"]
    provisioningProfile = ENV["PROVISIONING_PROFILE_SPECIFIER"]

    ensure_temp_keychain(keychain_name, keychain_password)
    xcode_select("/Applications/Xcode.app")
    api_key = app_store_connect_api_key(
      key_id: ENV["APPLE_KEY_ID"],
      issuer_id: ENV["APPLE_ISSUER_ID"],
      key_content: ENV["APPLE_KEY_CONTENT"],
      duration: 1200,
      in_house: false
    )

    previous_build_number = latest_testflight_build_number(
      app_identifier: app_identifier,
      api_key: api_key,
    )

    current_build_number = previous_build_number + 1

    xcodes(
      version: '15',
      select_for_current_build_only: true,
    )

    increment_build_number(
      xcodeproj: './ios/haqq.xcodeproj',
      build_number: current_build_number
    )

    match(
      type: 'development',
      app_identifier: app_identifier,
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    )

    match(
      type: 'appstore',
      app_identifier: app_identifier,
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    )

    update_code_signing_settings(
      path: './ios/haqq.xcodeproj',
      use_automatic_signing: false,
      code_sign_identity: 'iPhone Distribution',
      team_id: ENV["DEVELOPER_PORTAL_TEAM_ID"],
      profile_name: provisioningProfile,
      bundle_identifier: app_identifier,
    )

    gym(
      configuration: "Release",
      workspace: "ios/haqq.xcworkspace",
      scheme: "haqq",
      export_method: "app-store",
      xcargs: "-UseModernBuildSystem=YES",
      silent: true,
      xcodebuild_formatter: "xcbeautify",
      use_system_scm: true
    )

    pilot(
      api_key: api_key,
      apple_id: developer_apple_id,
      app_identifier: app_identifier,
      ipa: "haqq.ipa",
      skip_submission: true,
      skip_waiting_for_build_processing: true,
      changelog: ENV["BUILD_DESCRIPTION"]
    )

    delete_temp_keychain(keychain_name)
  end
end