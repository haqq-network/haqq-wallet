diff --git a/node_modules/@haqq/provider-sss-react-native/src/get-seed.ts b/node_modules/@haqq/provider-sss-react-native/src/get-seed.ts
index f2614e4..4b853f0 100644
--- a/node_modules/@haqq/provider-sss-react-native/src/get-seed.ts
+++ b/node_modules/@haqq/provider-sss-react-native/src/get-seed.ts
@@ -17,27 +17,38 @@ export async function getSeed(
   let shares = [];
 
   const share1 = await EncryptedStorage.getItem(`${ITEM_KEY}_${account}`);
+  console.error('1. share1:', JSON.stringify({share1}, null, 2));
 
   if (share1) {
     const password = await getPassword();
+    console.error('1.1. password:', JSON.stringify({password}, null, 2));
     const shareStore = await decryptShare(JSON.parse(share1), password);
+    console.error('1.2. shareStore:', JSON.stringify({shareStore}, null, 2));
 
     shares.push(shareStore);
   }
 
   const content = await storage.getItem(`haqq_${account}`);
+  console.error('2. content:', JSON.stringify({content}, null, 2));
+  console.error('2.1. content full:', content);
 
   if (content) {
-    shares.push(JSON.parse(content));
+    try {
+      shares.push(JSON.parse(content));
+    } catch(err) {
+      console.error('2.2. content parse error:', err);
+    }
   }
 
   shares = shares.filter(Boolean);
+  console.error('3. shares:', JSON.stringify({shares}, null, 2));
 
   if (shares.length < 2) {
     throw new Error('not enough shares');
   }
 
   const polynomialIDs = new Set(shares.map(s => s.polynomialID));
+  console.error('4. polynomialIDs:', JSON.stringify({polynomialIDs}, null, 2));
 
   if (polynomialIDs.size > 1) {
     throw new Error('polynomialID not equals');
@@ -47,8 +58,13 @@ export async function getSeed(
     shares.map(s => new BN(s.share, 'hex')),
     shares.map(s => new BN(s.shareIndex, 'hex')),
   );
+  console.error('5. privKey:', JSON.stringify({privKey}, null, 2));
 
   const mnemonic = await generateMnemonicFromEntropy(privKey.toBuffer());
+  console.error('6. mnemonic:', JSON.stringify({mnemonic}, null, 2));
+
   const seed = await seedFromMnemonic(mnemonic);
+  console.error('7. seed:', JSON.stringify({seed}, null, 2));
+
   return {seed, mnemonic};
 }
diff --git a/node_modules/@haqq/provider-sss-react-native/src/provider.ts b/node_modules/@haqq/provider-sss-react-native/src/provider.ts
index eff020a..33ab70c 100644
--- a/node_modules/@haqq/provider-sss-react-native/src/provider.ts
+++ b/node_modules/@haqq/provider-sss-react-native/src/provider.ts
@@ -1,5 +1,5 @@
-import {hexConcat} from '@ethersproject/bytes';
-import {serialize, UnsignedTransaction} from '@ethersproject/transactions';
+import { hexConcat } from '@ethersproject/bytes';
+import { serialize, UnsignedTransaction } from '@ethersproject/transactions';
 import {
   calcTypedDataSignatureV,
   compressPublicKey,
@@ -28,19 +28,18 @@ import {
   setMetadataValue,
   SharesResponse,
   ShareCreateResponse,
-} from '@haqq/shared-react-native';
+} from '@haqq/shared-react-native/src';
 import BN from 'bn.js';
 import EncryptedStorage from 'react-native-encrypted-storage';
-import {ITEM_KEY} from './constants';
-import {getSeed} from './get-seed';
-import {lagrangeInterpolation} from './lagrange-interpolation';
-import {Polynomial} from './polynomial';
-import {ProviderSSSOptions, StorageInterface} from './types';
+import { ITEM_KEY } from './constants';
+import { getSeed } from './get-seed';
+import { lagrangeInterpolation } from './lagrange-interpolation';
+import { Polynomial } from './polynomial';
+import { ProviderSSSOptions, StorageInterface } from './types';
 
 export class ProviderSSSReactNative
   extends Provider<ProviderSSSOptions>
-  implements ProviderInterface
-{
+  implements ProviderInterface {
   /**
    * Initialize SSS provider
    * @param socialPrivateKey private key which we get from social service
@@ -159,7 +158,7 @@ export class ProviderSSSReactNative
 
       keyPK = newPk.toString('hex');
 
-      const {share, ...shareIndex} = tmpSocialShare;
+      const { share, ...shareIndex } = tmpSocialShare;
 
       await setMetadataValue(
         options.metadataUrl,
@@ -173,7 +172,7 @@ export class ProviderSSSReactNative
       throw new Error('keyPK is null');
     }
 
-    const {address} = await accountInfo(keyPK);
+    const { address } = await accountInfo(keyPK);
 
     if (!cloudShare || privateKey) {
       const index = await generateEntropy(32);
@@ -258,9 +257,9 @@ export class ProviderSSSReactNative
   }
 
   async getAccountInfo(hdPath: string) {
-    let resp = {publicKey: '', address: ''};
+    let resp = { publicKey: '', address: '' };
     try {
-      const {seed} = await getSeed(
+      const { seed } = await getSeed(
         this._options.account,
         this._options.storage,
         this._options.getPassword,
@@ -297,17 +296,23 @@ export class ProviderSSSReactNative
   ): Promise<string> {
     let resp = '';
     try {
-      const {seed} = await getSeed(
+      console.error('SSSReactNative signTransaction');
+      console.error('this._options.account', this._options.account);
+      console.error('this._options.storage', this._options.storage);
+      console.error('this._options.getPassword', this._options.getPassword);
+      const { seed } = await getSeed(
         this._options.account,
         this._options.storage,
         this._options.getPassword,
       );
+      console.error('1. seed:', JSON.stringify({ seed }, null, 2));
 
       if (!seed) {
         throw new Error('seed_not_found');
       }
 
       const privateKey = await derive(seed, hdPath);
+      console.error('2. privateKey:', JSON.stringify({ privateKey }, null, 2));
 
       if (!privateKey) {
         throw new Error('private_key_not_found');
@@ -317,10 +322,13 @@ export class ProviderSSSReactNative
         privateKey,
         serialize(transaction as UnsignedTransaction),
       );
+      console.error('3. signature:', JSON.stringify({ signature }, null, 2));
 
       const sig = hexStringToByteArray(signature);
+      console.error('4. sig:', JSON.stringify({ sig }, null, 2));
 
       resp = serialize(transaction as UnsignedTransaction, sig);
+      console.error('5. resp:', JSON.stringify({ resp }, null, 2));
 
       this.emit('signTransaction', true);
     } catch (e) {
@@ -338,16 +346,20 @@ export class ProviderSSSReactNative
   ): Promise<string> {
     let resp = '';
     try {
-      const {seed} = await getSeed(
+      console.error('SSSReactNative signPersonalMessage');
+      const { seed } = await getSeed(
         this._options.account,
         this._options.storage,
         this._options.getPassword,
       );
+      console.error('1. seed:', JSON.stringify({ seed }, null, 2));
+
       if (!seed) {
         throw new Error('seed_not_found');
       }
 
       const privateKey = await derive(seed, hdPath);
+      console.error('2. privateKey:', JSON.stringify({ privateKey }, null, 2));
 
       if (!privateKey) {
         throw new Error('private_key_not_found');
@@ -363,8 +375,14 @@ export class ProviderSSSReactNative
           100, 32, 77, 101, 115, 115, 97, 103, 101, 58, 10,
         ].concat(stringToUtf8Bytes(String(message.length)), m),
       ).toString('hex');
+      console.error('3. hash:', JSON.stringify({ hash }, null, 2));
+
       const signature = await sign(privateKey, hash);
+      console.error('4. signature:', JSON.stringify({ signature }, null, 2));
+
       resp = '0x' + joinSignature(signature);
+      console.error('5. resp:', JSON.stringify({ resp }, null, 2));
+
       this.emit('signTransaction', true);
     } catch (e) {
       if (e instanceof Error) {
@@ -378,30 +396,35 @@ export class ProviderSSSReactNative
   async signTypedData(hdPath: string, typedData: TypedData): Promise<string> {
     let response = '';
     try {
-      const {seed} = await getSeed(
+      console.error('SSSReactNative signTypedData');
+      const { seed } = await getSeed(
         this._options.account,
         this._options.storage,
         this._options.getPassword,
       );
+      console.error('1. seed:', JSON.stringify({ seed }, null, 2));
 
       if (!seed) {
         throw new Error('seed_not_found');
       }
 
       const privateKey = await derive(seed, hdPath);
+      console.error('2. privateKey:', JSON.stringify({ privateKey }, null, 2));
 
       if (!privateKey) {
         throw new Error('private_key_not_found');
       }
 
-      const {domainSeparatorHex, hashStructMessageHex} =
+      const { domainSeparatorHex, hashStructMessageHex } =
         prepareHashedEip712Data(typedData);
       const concatHash = hexConcat([
         '0x1901',
         domainSeparatorHex,
         hashStructMessageHex,
       ]);
+      console.error('3. concatHash:', JSON.stringify({ concatHash }, null, 2));
       response = await sign(privateKey, concatHash);
+      console.error('4. response:', JSON.stringify({ response }, null, 2));
       this.emit('signTypedData', true);
     } catch (e) {
       if (e instanceof Error) {
@@ -414,16 +437,19 @@ export class ProviderSSSReactNative
 
   async updatePin(pin: string) {
     try {
+      console.error('SSS  updatePin', {pin})
       const share1 = await EncryptedStorage.getItem(
         `${ITEM_KEY}_${this._options.account.toLowerCase()}`,
       );
+      console.error('SSS  updatePin share', share1)
 
       if (share1) {
         const password = await this._options.getPassword();
 
         const share = await decryptShare(JSON.parse(share1), password);
         const share2 = await encryptShare(share, pin);
-
+        console.error('-> share1', share1)
+        console.error('-> share2', JSON.stringify(share2, null, 2))
         await EncryptedStorage.setItem(
           `${ITEM_KEY}_${this.getIdentifier().toLowerCase()}`,
           JSON.stringify(share2),
@@ -505,7 +531,7 @@ export class ProviderSSSReactNative
    * @returns mnemonic
    */
   async getMnemonicPhrase(): Promise<string> {
-    const {mnemonic} = await getSeed(
+    const { mnemonic } = await getSeed(
       this._options.account,
       this._options.storage,
       this._options.getPassword,
