import {DEBUG_VARS} from '@app/debug-vars';
import React, {useCallback, useMemo} from 'react';

import {ActivityIndicator, Linking, StyleSheet, View} from 'react-native';
import WebView from 'react-native-webview';

const patchPostMessageJsCode = `(${String(function () {
  var originalPostMessage = window.ReactNativeWebView.postMessage;
  var patchedPostMessage = function (message, targetOrigin, transfer) {
    originalPostMessage(message, targetOrigin, transfer);
  };
  patchedPostMessage.toString = function () {
    return String(Object.hasOwnProperty).replace(
      'hasOwnProperty',
      'postMessage',
    );
  };
  window.ReactNativeWebView.postMessage = patchedPostMessage;
})})();`;

const buildHcaptchaApiUrl = (
  jsSrc,
  siteKey,
  hl,
  theme,
  host,
  sentry,
  endpoint,
  assethost,
  imghost,
  reportapi,
) => {
  var url = `${
    jsSrc || 'https://hcaptcha.com/1/api.js'
  }?render=explicit&onload=onloadCallback`;

  if (host) {
    host = encodeURIComponent(host);
  } else {
    host = (siteKey || 'missing-sitekey') + '.react-native.hcaptcha.com';
  }

  for (let [key, value] of Object.entries({
    host,
    hl,
    custom: typeof theme === 'object',
    sentry,
    endpoint,
    assethost,
    imghost,
    reportapi,
  })) {
    if (value) {
      url += `&${key}=${encodeURIComponent(value)}`;
    }
  }

  return url;
};

const loggers = {
  log: console.log,
  warn: console.warn,
  error: console.error,
};

const WEB_VIEW_LOGGER = DEBUG_VARS.enableCaptchaLogger
  ? `
<script type="text/javascript">
  if(!window._patched){
    console.log = (...args) => {
        window.ReactNativeWebView.postMessage(JSON.stringify({ msg: args, type: "log" }));
    }
    console.error = (...args) => {
        window.ReactNativeWebView.postMessage(JSON.stringify({ msg: args, type: "error" }));
    }
    console.warn = (...args) => {
        window.ReactNativeWebView.postMessage(JSON.stringify({ msg: args, type: "warn" }));
    }
    window._patched = true;
  }
</script>
`
  : '';

/**
 *
 * @param {*} onMessage: callback after receiving response, error, or when user cancels
 * @param {*} siteKey: your hCaptcha sitekey
 * @param {string} size: The size of the checkbox, can be 'invisible', 'compact' or 'checkbox', Default: 'invisible'
 * @param {*} style: custom style
 * @param {*} url: base url
 * @param {*} languageCode: can be found at https://docs.hcaptcha.com/languages
 * @param {*} showLoading: loading indicator for webview till hCaptcha web content loads
 * @param {*} loadingIndicatorColor: color for the ActivityIndicator
 * @param {*} backgroundColor: backgroundColor which can be injected into HTML to alter css backdrop colour
 * @param {string|object} theme: can be 'light', 'dark', 'contrast' or custom theme object
 * @param {string} rqdata: see Enterprise docs
 * @param {boolean} sentry: sentry error reporting
 * @param {string} jsSrc: The url of api.js. Default: https://js.hcaptcha.com/1/api.js (Override only if using first-party hosting feature.)
 * @param {string} endpoint: Point hCaptcha JS Ajax Requests to alternative API Endpoint. Default: https://api.hcaptcha.com (Override only if using first-party hosting feature.)
 * @param {string} reportapi: Point hCaptcha Bug Reporting Request to alternative API Endpoint. Default: https://accounts.hcaptcha.com (Override only if using first-party hosting feature.)
 * @param {string} assethost: Points loaded hCaptcha assets to a user defined asset location, used for proxies. Default: https://newassets.hcaptcha.com (Override only if using first-party hosting feature.)
 * @param {string} imghost: Points loaded hCaptcha challenge images to a user defined image location, used for proxies. Default: https://imgs.hcaptcha.com (Override only if using first-party hosting feature.)
 * @param {string} host: hCaptcha SDK host identifier. null value means that it will be generated by SDK
 */
const Hcaptcha = ({
  onMessage,
  size,
  siteKey,
  style,
  url,
  languageCode,
  showLoading,
  loadingIndicatorColor,
  backgroundColor,
  theme,
  rqdata,
  sentry,
  jsSrc,
  endpoint,
  reportapi,
  assethost,
  imghost,
  host,
  enableAutoOpenChallenge = false,
}) => {
  const apiUrl = buildHcaptchaApiUrl(
    jsSrc,
    siteKey,
    languageCode,
    theme,
    host,
    sentry,
    endpoint,
    assethost,
    imghost,
    reportapi,
  );

  if (theme && typeof theme === 'string') {
    theme = `"${theme}"`;
  }

  if (rqdata && typeof rqdata === 'string') {
    rqdata = `"${rqdata}"`;
  }

  const generateTheWebViewContent = useMemo(
    () =>
      `<!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        ${WEB_VIEW_LOGGER}
        <script src="${apiUrl}" async defer></script>
        <script type="text/javascript">
          var onloadCallback = function() {
            try {
              console.log("challenge onload starting");
              hcaptcha.render("submit", getRenderConfig("${
                siteKey || ''
              }", ${theme}, "${size || 'invisible'}"));
              // have loaded by this point; render is sync.
              console.log("challenge render complete");
            } catch (e) {
              console.log("challenge failed to render");
              window.ReactNativeWebView.postMessage("error");
            }
            try {
              console.log("showing challenge");
              if(${enableAutoOpenChallenge}) {
                hcaptcha.execute(getExecuteOpts());
              }
            } catch (e) {
              console.log("failed to show challenge");
              window.ReactNativeWebView.postMessage("error");
            }
          };
          var onDataCallback = function(response) {
            window.ReactNativeWebView.postMessage(response);
          };
          var onCancel = function() {
            window.ReactNativeWebView.postMessage("chalcancel");
          };
          var onOpen = function() {
            // NOTE: disabled for simplicity.
            // window.ReactNativeWebView.postMessage("open");
            console.log("challenge opened");
          };
          var onDataExpiredCallback = function(error) { window.ReactNativeWebView.postMessage("expired"); };
          var onChalExpiredCallback = function(error) { window.ReactNativeWebView.postMessage("chalexpired"); };
          var onDataErrorCallback = function(error) {
            console.log("challenge error callback fired");
            window.ReactNativeWebView.postMessage("error");
          };
          const getRenderConfig = function(siteKey, theme, size) {
            var config = {
              sitekey: siteKey,
              size: size,
              callback: onDataCallback,
              "close-callback": onCancel,
              "open-callback": onOpen,
              "expired-callback": onDataExpiredCallback,
              "chalexpired-callback": onChalExpiredCallback,
              "error-callback": onDataErrorCallback
            };
            if (theme) {
              config.theme = theme;
            }
            return config;
          };
          const getExecuteOpts = function() {
            var opts;
            const rqdata = ${rqdata};
            if (rqdata) {
              opts = {"rqdata": rqdata};
            }
            return opts;
          };
        </script>
      </head>
      <body style="background-color: ${backgroundColor}; -webkit-user-select: none; -ms-user-select: none; user-select: none;">
          <div onclick="window.ReactNativeWebView.postMessage('click-outside')" style="background-color: none;align-self: center; display: flex; align-items: center; justify-content: center;flex: 1; height: 100vh; overflow: hidden;">
            <div onclick="function (event) {event.stopPropagation()}" id="submit" style="padding: 2px;"></div>
          </div>
      </body>
      </html>`,
    [
      apiUrl,
      siteKey,
      theme,
      size,
      enableAutoOpenChallenge,
      rqdata,
      backgroundColor,
    ],
  );

  // This shows ActivityIndicator till webview loads hCaptcha images
  const renderLoading = useCallback(
    () => (
      <View style={styles.loadingOverlay}>
        <ActivityIndicator size="large" color={loadingIndicatorColor} />
      </View>
    ),
    [loadingIndicatorColor],
  );

  return (
    <WebView
      scrollEnabled={false}
      originWhitelist={['*']}
      onShouldStartLoadWithRequest={event => {
        if (event.url.slice(0, 24) === 'https://www.hcaptcha.com') {
          Linking.openURL(event.url);
          return false;
        }
        return true;
      }}
      mixedContentMode={'always'}
      onMessage={event => {
        if (DEBUG_VARS.enableCaptchaLogger) {
          try {
            const data = JSON.parse(event?.nativeEvent?.data);
            if (data.msg) {
              // @ts-ignore
              const logger = loggers[data.type];
              return logger('ðŸŸ¢ [HCapthca]: ', ...data.msg);
            }
          } catch (e) {}
        }
        onMessage?.(event);
      }}
      javaScriptEnabled
      injectedJavaScript={patchPostMessageJsCode}
      automaticallyAdjustContentInsets
      style={[{backgroundColor: 'transparent', width: '100%'}, style]}
      source={{
        html: generateTheWebViewContent,
        baseUrl: `${url}`,
      }}
      renderLoading={renderLoading}
      startInLoadingState={showLoading}
    />
  );
};

const styles = StyleSheet.create({
  loadingOverlay: {
    bottom: 0,
    justifyContent: 'center',
    left: 0,
    position: 'absolute',
    right: 0,
    top: 0,
  },
});

export default Hcaptcha;
